import org.jetbrains.gradle.ext.Gradle

plugins {
    id("java")
    id("java-library")
    id("org.jetbrains.gradle.plugin.idea-ext") version "1.1.7"
    id("com.gtnewhorizons.retrofuturagradle") version "1.+"
    id("com.matthewprenger.cursegradle") version "1.4.0"
}

// Add version to the jar name
version project.version

// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        vendor.set(JvmVendorSpec.ADOPTIUM)
    }
    // Generate sources jar when building
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.fork = true
    options.forkOptions.jvmArgs += ["-Xmx4G"]
}

minecraft {
    mcVersion = '1.12.2'

    username = "Desoroxxx"

    def args = ['-Dfml.coreMods.load=com.paneedah.weaponlib.core.WeaponlibCorePlugin']

    injectedTags.put('ID', project.id)
    injectedTags.put('VERSION', project.version)
}

// Generate a Tags class with the version and id as a field
tasks.injectTags.configure {
    outputClassName.set("com.paneedah.${project.id}.Tags")
}

// Replace version and id in `mcmod.info`
processResources {
    inputs.property 'id', project.id
    inputs.property 'version', project.version
    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        include 'mcmod.info'
        fcd.expand(
                'id': project.id,
                'version': project.version
        )
    }

    from('src/main/java') {
        include '**/*.png'

        include '**/*.json'

        include '**/*.vsh'

        include '**/*.fsh'
    }
}

// Create configuration to include embedded dependencies into FBP jar
configurations {
    implementation
    compile.extendsFrom(embed)
}

repositories {
    ivy {
        url 'https://github.com/'

        patternLayout { artifact '[organisation]/[module]/releases/download/[revision]/[module]-[revision].[ext]' }

        metadataSources { artifact() }
    }
}

dependencies {
    implementation 'Red-Studio-Ragnarok:Red-Core:0.2-Dev-2@jar'

    implementation 'net.jafama:jafama:2.+'
    embed 'net.jafama:jafama:2.+'
}

jar {
    manifest.attributes([
            'ModSide': 'BOTH',
            'FMLCorePlugin': 'com.paneedah.weaponlib.core.WeaponlibCorePlugin',
            'FMLCorePluginContainsFMLMod': 'true',
            'ForceLoadAsMod': 'true'
    ])

    // Add all embedded dependencies into the jar
    from(provider{ configurations.embed.collect {it.isDirectory() ? it : zipTree(it)} })
}

idea {
    module { inheritOutputDirs = true }

    module {
        excludeDirs = [file(".github"), file(".gradle"), file(".idea"), file("build"), file("gradle"), file("run")]
    }

    project { settings {
        runConfigurations {
            "1. Client"(Gradle) {
                taskNames = ["runClient"]
            }
            "2. Server"(Gradle) {
                taskNames = ["runServer"]
            }
            "3. Obfuscated Client"(Gradle) {
                taskNames = ["runObfClient"]
            }
            "4. Obfuscated Server"(Gradle) {
                taskNames = ["runObfServer"]
            }
        }

        compiler.javac {
            afterEvaluate {
                javacAdditionalOptions = "-encoding utf8"
                moduleJavacAdditionalOptions = [
                        (project.id + ".main"): tasks.compileJava.options.compilerArgs.collect { '"' + it + '"' }.join(' ')
                ]
            }
        }
    }}
}

tasks.named("processIdeaSettings").configure {
    dependsOn("injectTags")
}
