import org.jetbrains.gradle.ext.Gradle

// Todo: Port this to the Kotlin DSL
// Todo: Use buildconfig instead of rfg tags

plugins {
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.+'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'io.freefair.lombok' version '8.2.2'
}

// Add version to the jar name
group = 'com.paneedah'
version = project.version

minecraft {
    mcVersion = '1.12.2'

    username = 'Desoroxxx'

    extraRunJvmArguments.addAll('-Xmx4G', '-Xms4G', '-Dforge.logging.console.level=debug', '-Dmixin.hotSwap=true', '-Dmixin.checks.interfaces=true', '-Dmixin.debug.export=true', '-Dfml.coreMods.load=com.paneedah.mwc.asm.MWCPlugin')

    injectedTags.put('ID', project.id)
    injectedTags.put('VERSION', project.version)
}

// Generate a my.project.Tags class with the version number as a field
tasks.injectTags.configure {
    outputClassName.set("com.paneedah.${project.id}.Tags")
}

configurations {
    // Define a configuration to download and attach sources
    sources
}

repositories {
    maven {
        name 'Cleanroom'
        url 'https://maven.cleanroommc.com'
    }

    ivy {
        name 'Red Studio GitHub Releases'
        url 'https://github.com/'

        patternLayout { artifact '[organisation]/[module]/releases/download/[revision]/[module]-[revision](-[classifier]).[ext]' }

        metadataSources { artifact() }
    }
}

dependencies {
    implementation 'Red-Studio-Ragnarok:Red-Core:0.5-Dev-1'
    sources 'Red-Studio-Ragnarok:Red-Core:0.5-Dev-1:sources@jar'

    annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'
    annotationProcessor 'com.google.guava:guava:32.1.2-jre'
    annotationProcessor 'com.google.code.gson:gson:2.8.9'

    final String mixinBooter = modUtils.enableMixins('zone.rong:mixinbooter:8.6')
    api(mixinBooter) {
        transitive = false
    }
    annotationProcessor(mixinBooter) {
        transitive = false
    }
}

// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        vendor.set(JvmVendorSpec.ADOPTIUM)
    }
    // Generate sources jar when building and publishing
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.fork = true
    options.forkOptions.jvmArgs += '-Xmx4G'
}

def at = project.files("src/main/resources/META-INF/${project.id}_at.cfg")

tasks.deobfuscateMergedJarToSrg.accessTransformerFiles.from(at)
tasks.srgifyBinpatchedJar.accessTransformerFiles.from(at)

// Replace version and id in `mcmod.info`
processResources {
    inputs.property 'id', project.id
    inputs.property 'version', project.version
    filesMatching('mcmod.info') { fcd ->
        include 'mcmod.info'
        fcd.expand(
                'id': project.id,
                'version': project.version
        )
    }

    from('src/main/java') {
        include '**/*.png'

        include '**/*.json'

        include '**/*.vsh'

        include '**/*.fsh'
    }
}

jar {
    manifest.attributes([
            'ModSide'                    : 'BOTH',
            'FMLAT'                      : "${project.id}_at.cfg",
            'FMLCorePlugin'              : "com.paneedah.mwc.asm.MWCPlugin",
            'FMLCorePluginContainsFMLMod': 'true',
            'ForceLoadAsMod'             : 'true'
    ])
}


idea {
    module {
        inheritOutputDirs = true
        excludeDirs = [
                file('.settings'),
                file('.github'),
                file('.gradle'),
                file('gradle'),
                file('.idea'),
                file('build'),
                file('run'),
                file('bin')
        ]
    }

    project {
        jdkName = '1.8'
        languageLevel = '1.8'

        settings {
            runConfigurations {
                'Client'(Gradle) {
                    taskNames = ['runClient']
                }
                'Server'(Gradle) {
                    taskNames = ['runServer']
                }
                'Obfuscated Client'(Gradle) {
                    taskNames = ['runObfClient']
                }
                'Obfuscated Server'(Gradle) {
                    taskNames = ['runObfServer']
                }
                'Vanilla Client'(Gradle) {
                    taskNames = ['runVanillaClient']
                }
                'Vanilla Server'(Gradle) {
                    taskNames = ['runVanillaServer']
                }
            }

            compiler.javac {
                afterEvaluate {
                    javacAdditionalOptions = '-encoding utf8'
                    moduleJavacAdditionalOptions = [(project.id + '.main'): tasks.compileJava.options.compilerArgs.collect { ''' + it + ''' }.join(' ')]
                }
            }
        }
    }
}

tasks.named('processIdeaSettings').configure {
    dependsOn('injectTags')
}
